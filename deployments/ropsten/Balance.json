{
  "address": "0x75dD429df43C3d9c372F3d1ac80e88Aae26eAc02",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inspector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bill",
          "type": "uint256"
        }
      ],
      "name": "AcceptClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bill",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        }
      ],
      "name": "InspectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bill",
          "type": "uint256"
        }
      ],
      "name": "RejectClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_CLAIM_PACKAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_CONSUMER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_bills",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gasFees",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "protocolFees",
          "type": "uint256[]"
        }
      ],
      "name": "acceptClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "billCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "enum Balance.BillStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inspector",
          "type": "address"
        }
      ],
      "name": "changeInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inspector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "netBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_bills",
          "type": "uint256[]"
        }
      ],
      "name": "rejectClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x22e38864d8b843f7c41579c0d87001b7825596bb2c34605ff9e8058f0ac94e08",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0x75dD429df43C3d9c372F3d1ac80e88Aae26eAc02",
    "transactionIndex": 0,
    "gasUsed": "1669098",
    "logsBloom": "0x
    "blockHash": "0x74d3ee0a8557379241f8838459215a45c4e208bec437f448484cfa22caeffc72",
    "transactionHash": "0x22e38864d8b843f7c41579c0d87001b7825596bb2c34605ff9e8058f0ac94e08",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10710375,
        "transactionHash": "0x22e38864d8b843f7c41579c0d87001b7825596bb2c34605ff9e8058f0ac94e08",
        "address": "0x75dD429df43C3d9c372F3d1ac80e88Aae26eAc02",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x74d3ee0a8557379241f8838459215a45c4e208bec437f448484cfa22caeffc72"
      }
    ],
    "blockNumber": 10710375,
    "cumulativeGasUsed": "1669098",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa4D0B8357B9635d324087228e068FA7c243eecbF",
    "0xC5eDf72e3412214d863Fc53Ba7AE3BDd646d7aba"
  ],
  "solcInputHash": "3fcae28c095ae868a7da4705a4d093f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inspector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bill\",\"type\":\"uint256\"}],\"name\":\"AcceptClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"}],\"name\":\"InspectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bill\",\"type\":\"uint256\"}],\"name\":\"RejectClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_CLAIM_PACKAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_CONSUMER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_bills\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasFees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"protocolFees\",\"type\":\"uint256[]\"}],\"name\":\"acceptClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"enum Balance.BillStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inspector\",\"type\":\"address\"}],\"name\":\"changeInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inspector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"netBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_bills\",\"type\":\"uint256[]\"}],\"name\":\"rejectClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptClaims(uint256[],uint256[],uint256[])\":{\"params\":{\"_bills\":\"Target bills.\",\"gasFees\":\"Confirmed claims gas fees by bills.\",\"protocolFees\":\"Confirmed claims protocol fees by bills.\"}},\"addConsumer(address)\":{\"params\":{\"consumer\":\"Added consumer.\"}},\"changeInspector(address)\":{\"params\":{\"_inspector\":\"New inspector oracle address.\"}},\"changeTreasury(address)\":{\"params\":{\"_treasury\":\"New treasury contract address.\"}},\"claim(address,uint256,uint256,string)\":{\"params\":{\"account\":\"Target account.\",\"description\":\"Claim description.\",\"gasFee\":\"Claim gas fee.\",\"protocolFee\":\"Claim protocol fee.\"}},\"consumers()\":{\"returns\":{\"_0\":\"All consumers addresses.\"}},\"deposit(address)\":{\"params\":{\"recipient\":\"Target recipient.\"}},\"netBalanceOf(address)\":{\"params\":{\"account\":\"Target account.\"},\"returns\":{\"_0\":\"Net balance (balance minus claim).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(uint256)\":{\"params\":{\"amount\":\"Refunded amount.\"}},\"rejectClaims(uint256[])\":{\"params\":{\"_bills\":\"Target bills.\"}},\"removeConsumer(address)\":{\"params\":{\"consumer\":\"Removed consumer.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_consumers\":{\"details\":\"Consumers list.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAXIMUM_CLAIM_PACKAGE()\":{\"notice\":\"Maximum accept or reject claims by one call.\"},\"MAXIMUM_CONSUMER_COUNT()\":{\"notice\":\"Maximum consumer count.\"},\"acceptClaims(uint256[],uint256[],uint256[])\":{\"notice\":\"Accept bills package.\"},\"addConsumer(address)\":{\"notice\":\"Add consumer.\"},\"balanceOf(address)\":{\"notice\":\"Account balance.\"},\"billCount()\":{\"notice\":\"Bill count.\"},\"bills(uint256)\":{\"notice\":\"Bills.\"},\"changeInspector(address)\":{\"notice\":\"Change inspector oracle address.\"},\"changeTreasury(address)\":{\"notice\":\"Change treasury contract address.\"},\"claim(address,uint256,uint256,string)\":{\"notice\":\"Send claim.\"},\"claimOf(address)\":{\"notice\":\"Account claim.\"},\"consumers()\":{\"notice\":\"Get all consumers.\"},\"deposit(address)\":{\"notice\":\"Deposit ETH to balance.\"},\"inspector()\":{\"notice\":\"Oracle accepting and rejecting claims\"},\"netBalanceOf(address)\":{\"notice\":\"Get net balance of account.\"},\"refund(uint256)\":{\"notice\":\"Refund ETH from balance.\"},\"rejectClaims(uint256[])\":{\"notice\":\"Reject bills package.\"},\"removeConsumer(address)\":{\"notice\":\"Remove consumer.\"},\"treasury()\":{\"notice\":\"Treasury contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Balance.sol\":\"Balance\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Balance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD 3\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract Balance is Ownable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @notice Maximum consumer count.\\n  uint256 public constant MAXIMUM_CONSUMER_COUNT = 10;\\n\\n  /// @notice Maximum accept or reject claims by one call.\\n  uint256 public constant MAXIMUM_CLAIM_PACKAGE = 10;\\n\\n  /// @notice Treasury contract\\n  address payable public treasury;\\n\\n  /// @notice Oracle accepting and rejecting claims\\n  address public inspector;\\n\\n  /// @dev Consumers list.\\n  EnumerableSet.AddressSet internal _consumers;\\n\\n  /// @notice Account balance.\\n  mapping(address => uint256) public balanceOf;\\n\\n  /// @notice Account claim.\\n  mapping(address => uint256) public claimOf;\\n\\n  /// @notice Possible statuses that a bill may be in.\\n  enum BillStatus {\\n    Pending,\\n    Accepted,\\n    Rejected\\n  }\\n\\n  struct Bill {\\n    // Identificator.\\n    uint256 id;\\n    // Claimant.\\n    address claimant;\\n    // Target account.\\n    address account;\\n    // Claim gas fee.\\n    uint256 gasFee;\\n    // Claim protocol fee.\\n    uint256 protocolFee;\\n    // Current bill status.\\n    BillStatus status;\\n  }\\n\\n  /// @notice Bills.\\n  mapping(uint256 => Bill) public bills;\\n\\n  /// @notice Bill count.\\n  uint256 public billCount;\\n\\n  event TreasuryChanged(address indexed treasury);\\n\\n  event InspectorChanged(address indexed inspector);\\n\\n  event ConsumerAdded(address indexed consumer);\\n\\n  event ConsumerRemoved(address indexed consumer);\\n\\n  event Deposit(address indexed recipient, uint256 amount);\\n\\n  event Refund(address indexed recipient, uint256 amount);\\n\\n  event Claim(address indexed account, uint256 indexed bill, string description);\\n\\n  event AcceptClaim(uint256 indexed bill);\\n\\n  event RejectClaim(uint256 indexed bill);\\n\\n  constructor(address payable _treasury, address _inspector) {\\n    treasury = _treasury;\\n    inspector = _inspector;\\n  }\\n\\n  modifier onlyInspector() {\\n    require(inspector == _msgSender(), \\\"Balance: caller is not the inspector\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Change treasury contract address.\\n   * @param _treasury New treasury contract address.\\n   */\\n  function changeTreasury(address payable _treasury) external onlyOwner {\\n    treasury = _treasury;\\n    emit TreasuryChanged(treasury);\\n  }\\n\\n  /**\\n   * @notice Change inspector oracle address.\\n   * @param _inspector New inspector oracle address.\\n   */\\n  function changeInspector(address _inspector) external onlyOwner {\\n    inspector = _inspector;\\n    emit InspectorChanged(inspector);\\n  }\\n\\n  /**\\n   * @notice Add consumer.\\n   * @param consumer Added consumer.\\n   */\\n  function addConsumer(address consumer) external onlyOwner {\\n    require(!_consumers.contains(consumer), \\\"Balance::addConsumer: consumer already added\\\");\\n    require(\\n      _consumers.length() < MAXIMUM_CONSUMER_COUNT,\\n      \\\"Balance::addConsumer: consumer must not exceed maximum count\\\"\\n    );\\n\\n    _consumers.add(consumer);\\n\\n    emit ConsumerAdded(consumer);\\n  }\\n\\n  /**\\n   * @notice Remove consumer.\\n   * @param consumer Removed consumer.\\n   */\\n  function removeConsumer(address consumer) external onlyOwner {\\n    require(_consumers.contains(consumer), \\\"Balance::addConsumer: consumer already removed\\\");\\n\\n    _consumers.remove(consumer);\\n\\n    emit ConsumerRemoved(consumer);\\n  }\\n\\n  /**\\n   * @notice Get all consumers.\\n   * @return All consumers addresses.\\n   */\\n  function consumers() external view returns (address[] memory) {\\n    address[] memory result = new address[](_consumers.length());\\n\\n    for (uint256 i = 0; i < _consumers.length(); i++) {\\n      result[i] = _consumers.at(i);\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Get net balance of account.\\n   * @param account Target account.\\n   * @return Net balance (balance minus claim).\\n   */\\n  function netBalanceOf(address account) public view returns (uint256) {\\n    return balanceOf[account] - claimOf[account];\\n  }\\n\\n  /**\\n   * @notice Deposit ETH to balance.\\n   * @param recipient Target recipient.\\n   */\\n  function deposit(address recipient) external payable {\\n    require(recipient != address(0), \\\"Balance::deposit: invalid recipient\\\");\\n    require(msg.value > 0, \\\"Balance::deposit: negative or zero deposit\\\");\\n\\n    balanceOf[recipient] += msg.value;\\n\\n    emit Deposit(recipient, msg.value);\\n  }\\n\\n  /**\\n   * @notice Refund ETH from balance.\\n   * @param amount Refunded amount.\\n   */\\n  function refund(uint256 amount) external {\\n    address payable recipient = payable(_msgSender());\\n    require(amount > 0, \\\"Balance::refund: negative or zero refund\\\");\\n    require(amount <= netBalanceOf(recipient), \\\"Balance::refund: refund amount exceeds net balance\\\");\\n\\n    balanceOf[recipient] -= amount;\\n    recipient.transfer(amount);\\n\\n    emit Refund(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Send claim.\\n   * @param account Target account.\\n   * @param gasFee Claim gas fee.\\n   * @param protocolFee Claim protocol fee.\\n   * @param description Claim description.\\n   */\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256) {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == account || _consumers.contains(tx.origin),\\n      \\\"Balance: caller is not a consumer\\\"\\n    );\\n\\n    uint256 amount = gasFee + protocolFee;\\n    require(amount > 0, \\\"Balance::claim: negative or zero claim\\\");\\n    require(amount <= netBalanceOf(account), \\\"Balance::claim: claim amount exceeds net balance\\\");\\n\\n    claimOf[account] += amount;\\n    billCount++;\\n    bills[billCount] = Bill(billCount, _msgSender(), account, gasFee, protocolFee, BillStatus.Pending);\\n    emit Claim(account, billCount, description);\\n\\n    return billCount;\\n  }\\n\\n  /**\\n   * @notice Accept bills package.\\n   * @param _bills Target bills.\\n   * @param gasFees Confirmed claims gas fees by bills.\\n   * @param protocolFees Confirmed claims protocol fees by bills.\\n   */\\n  function acceptClaims(\\n    uint256[] memory _bills,\\n    uint256[] memory gasFees,\\n    uint256[] memory protocolFees\\n  ) external onlyInspector {\\n    require(\\n      _bills.length == gasFees.length && _bills.length == protocolFees.length,\\n      \\\"Balance::acceptClaims: arity mismatch\\\"\\n    );\\n    require(_bills.length < MAXIMUM_CLAIM_PACKAGE, \\\"Balance::acceptClaims: too many claims\\\");\\n\\n    uint256 transferredAmount;\\n    for (uint256 i = 0; i < _bills.length; i++) {\\n      uint256 billId = _bills[i];\\n      require(billId > 0 && billId <= billCount, \\\"Balance::acceptClaims: bill not found\\\");\\n\\n      uint256 gasFee = gasFees[i];\\n      uint256 protocolFee = protocolFees[i];\\n      uint256 amount = gasFee + protocolFee;\\n\\n      Bill storage bill = bills[billId];\\n      uint256 claimAmount = bill.gasFee + bill.protocolFee;\\n      require(bill.status == BillStatus.Pending, \\\"Balance::acceptClaims: bill already processed\\\");\\n      require(amount <= claimAmount, \\\"Balance::acceptClaims: claim amount exceeds max fee\\\");\\n\\n      bill.status = BillStatus.Accepted;\\n      bill.gasFee = gasFee;\\n      bill.protocolFee = protocolFee;\\n      claimOf[bill.account] -= claimAmount;\\n      balanceOf[bill.account] -= amount;\\n      transferredAmount += amount;\\n\\n      emit AcceptClaim(bill.id);\\n    }\\n    treasury.transfer(transferredAmount);\\n  }\\n\\n  /**\\n   * @notice Reject bills package.\\n   * @param _bills Target bills.\\n   */\\n  function rejectClaims(uint256[] memory _bills) external onlyInspector {\\n    require(_bills.length < MAXIMUM_CLAIM_PACKAGE, \\\"Balance::rejectClaims: too many claims\\\");\\n\\n    for (uint256 i = 0; i < _bills.length; i++) {\\n      uint256 billId = _bills[i];\\n      require(billId > 0 && billId <= billCount, \\\"Balance::rejectClaims: bill not found\\\");\\n\\n      Bill storage bill = bills[billId];\\n      require(bill.status == BillStatus.Pending, \\\"Balance::rejectClaims: bill already processed\\\");\\n      uint256 amount = bill.gasFee + bill.protocolFee;\\n\\n      bill.status = BillStatus.Rejected;\\n      claimOf[bill.account] -= amount;\\n\\n      emit RejectClaim(bill.id);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9a0090e7fb52f2e238d56bfd6c26c7c41a16c79f7510a0ab83df18a3915365a4\",\"license\":\"BSD 3\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001d1138038062001d118339810160408190526200003491620000c1565b6200003f3362000071565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562000119565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000d557600080fd5b8251620000e28162000100565b6020840151909250620000f58162000100565b809150509250929050565b6001600160a01b03811681146200011657600080fd5b50565b611be880620001296000396000f3fe6080604052600436106101355760003560e01c806365e3527d116100ab578063e578a2251161006f578063e578a22514610386578063ed2cee9e146103a6578063eed7c45e146103c6578063f2fde38b146103e6578063f340fa0114610406578063fccd7f721461041957600080fd5b806365e3527d146102e657806370a0823114610306578063715018a6146103335780638da5cb5b14610348578063b14f2a391461036657600080fd5b8063328199b7116100fd578063328199b714610241578063332d950f1461024157806341dc341214610256578063435e29801461026c578063473f01751461028e57806361d027b3146102ae57600080fd5b80630b986a501461013a5780630e27e3df1461016d578063112940f91461018f578063278ecde1146101af57806328bdcde8146101cf575b600080fd5b34801561014657600080fd5b5061015a610155366004611788565b610446565b6040519081526020015b60405180910390f35b34801561017957600080fd5b5061018d610188366004611788565b61047a565b005b34801561019b57600080fd5b5061018d6101aa366004611788565b61055e565b3480156101bb57600080fd5b5061018d6101ca366004611925565b6106b7565b3480156101db57600080fd5b5061022f6101ea366004611925565b60076020526000908152604090208054600182015460028301546003840154600485015460059095015493946001600160a01b03938416949290931692909160ff1686565b60405161016496959493929190611a59565b34801561024d57600080fd5b5061015a600a81565b34801561026257600080fd5b5061015a60085481565b34801561027857600080fd5b50610281610834565b604051610164919061193e565b34801561029a57600080fd5b5061018d6102a936600461189d565b6108e7565b3480156102ba57600080fd5b506001546102ce906001600160a01b031681565b6040516001600160a01b039091168152602001610164565b3480156102f257600080fd5b5061018d610301366004611860565b610ce5565b34801561031257600080fd5b5061015a610321366004611788565b60056020526000908152604090205481565b34801561033f57600080fd5b5061018d610f31565b34801561035457600080fd5b506000546001600160a01b03166102ce565b34801561037257600080fd5b5061018d610381366004611788565b610f67565b34801561039257600080fd5b5061015a6103a13660046117a5565b610fdb565b3480156103b257600080fd5b506002546102ce906001600160a01b031681565b3480156103d257600080fd5b5061018d6103e1366004611788565b61129f565b3480156103f257600080fd5b5061018d610401366004611788565b611313565b61018d610414366004611788565b6113ae565b34801561042557600080fd5b5061015a610434366004611788565b60066020526000908152604090205481565b6001600160a01b03811660009081526006602090815260408083205460059092528220546104749190611afd565b92915050565b6000546001600160a01b031633146104ad5760405162461bcd60e51b81526004016104a4906119e0565b60405180910390fd5b6104b86003826114e1565b61051b5760405162461bcd60e51b815260206004820152602e60248201527f42616c616e63653a3a616464436f6e73756d65723a20636f6e73756d6572206160448201526d1b1c9958591e481c995b5bdd995960921b60648201526084016104a4565b610526600382611506565b506040516001600160a01b038216907fe3f5ed5f263f1f01764a96edfc7d025f511ec5f7d180e8816908b78bcf74f09890600090a250565b6000546001600160a01b031633146105885760405162461bcd60e51b81526004016104a4906119e0565b6105936003826114e1565b156105f55760405162461bcd60e51b815260206004820152602c60248201527f42616c616e63653a3a616464436f6e73756d65723a20636f6e73756d6572206160448201526b1b1c9958591e48185919195960a21b60648201526084016104a4565b600a610601600361151b565b106106745760405162461bcd60e51b815260206004820152603c60248201527f42616c616e63653a3a616464436f6e73756d65723a20636f6e73756d6572206d60448201527f757374206e6f7420657863656564206d6178696d756d20636f756e740000000060648201526084016104a4565b61067f600382611525565b506040516001600160a01b038216907f28b26e7a3d20aedbc5f8f2ebf7da671c0491723a2b78f47a097b0e46dee0714290600090a250565b33816107165760405162461bcd60e51b815260206004820152602860248201527f42616c616e63653a3a726566756e643a206e65676174697665206f72207a65726044820152671bc81c99599d5b9960c21b60648201526084016104a4565b61071f81610446565b8211156107895760405162461bcd60e51b815260206004820152603260248201527f42616c616e63653a3a726566756e643a20726566756e6420616d6f756e742065604482015271786365656473206e65742062616c616e636560701b60648201526084016104a4565b6001600160a01b038116600090815260056020526040812080548492906107b1908490611afd565b90915550506040516001600160a01b0382169083156108fc029084906000818181858888f193505050501580156107ec573d6000803e3d6000fd5b50806001600160a01b03167fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8360405161082891815260200190565b60405180910390a25050565b60606000610842600361151b565b67ffffffffffffffff81111561085a5761085a611b87565b604051908082528060200260200182016040528015610883578160200160208202803683370190505b50905060005b610893600361151b565b8110156108e1576108a560038261153a565b8282815181106108b7576108b7611b71565b6001600160a01b0390921660209283029190910190910152806108d981611b14565b915050610889565b50919050565b6002546001600160a01b031633146109115760405162461bcd60e51b81526004016104a490611a15565b81518351148015610923575080518351145b61097d5760405162461bcd60e51b815260206004820152602560248201527f42616c616e63653a3a616363657074436c61696d733a206172697479206d69736044820152640dac2e8c6d60db1b60648201526084016104a4565b600a8351106109dd5760405162461bcd60e51b815260206004820152602660248201527f42616c616e63653a3a616363657074436c61696d733a20746f6f206d616e7920604482015265636c61696d7360d01b60648201526084016104a4565b6000805b8451811015610ca35760008582815181106109fe576109fe611b71565b60200260200101519050600081118015610a1a57506008548111155b610a745760405162461bcd60e51b815260206004820152602560248201527f42616c616e63653a3a616363657074436c61696d733a2062696c6c206e6f7420604482015264199bdd5b9960da1b60648201526084016104a4565b6000858381518110610a8857610a88611b71565b602002602001015190506000858481518110610aa657610aa6611b71565b6020026020010151905060008183610abe9190611ae5565b6000858152600760205260408120600481015460038201549394509092610ae59190611ae5565b90506000600583015460ff166002811115610b0257610b02611b45565b14610b655760405162461bcd60e51b815260206004820152602d60248201527f42616c616e63653a3a616363657074436c61696d733a2062696c6c20616c726560448201526c18591e481c1c9bd8d95cdcd959609a1b60648201526084016104a4565b80831115610bd15760405162461bcd60e51b815260206004820152603360248201527f42616c616e63653a3a616363657074436c61696d733a20636c61696d20616d6f604482015272756e742065786365656473206d61782066656560681b60648201526084016104a4565b60058201805460ff19166001179055600382018590556004820184905560028201546001600160a01b031660009081526006602052604081208054839290610c1a908490611afd565b909155505060028201546001600160a01b031660009081526005602052604081208054859290610c4b908490611afd565b90915550610c5b90508389611ae5565b8254604051919950907f799d0ccabf9cc5c53a2860d6b8133855f77618de4233ce9bb031395090d1c08090600090a25050505050508080610c9b90611b14565b9150506109e1565b506001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610cde573d6000803e3d6000fd5b5050505050565b6002546001600160a01b03163314610d0f5760405162461bcd60e51b81526004016104a490611a15565b600a815110610d6f5760405162461bcd60e51b815260206004820152602660248201527f42616c616e63653a3a72656a656374436c61696d733a20746f6f206d616e7920604482015265636c61696d7360d01b60648201526084016104a4565b60005b8151811015610f2d576000828281518110610d8f57610d8f611b71565b60200260200101519050600081118015610dab57506008548111155b610e055760405162461bcd60e51b815260206004820152602560248201527f42616c616e63653a3a72656a656374436c61696d733a2062696c6c206e6f7420604482015264199bdd5b9960da1b60648201526084016104a4565b600081815260076020526040812090600582015460ff166002811115610e2d57610e2d611b45565b14610e905760405162461bcd60e51b815260206004820152602d60248201527f42616c616e63653a3a72656a656374436c61696d733a2062696c6c20616c726560448201526c18591e481c1c9bd8d95cdcd959609a1b60648201526084016104a4565b600081600401548260030154610ea69190611ae5565b60058301805460ff191660029081179091558301546001600160a01b0316600090815260066020526040812080549293508392909190610ee7908490611afd565b909155505081546040517f64133ae74e171ef7ce5b71e32115aba7117a4f1bd6ef67b768668f5af1af97ad90600090a25050508080610f2590611b14565b915050610d72565b5050565b6000546001600160a01b03163314610f5b5760405162461bcd60e51b81526004016104a4906119e0565b610f656000611546565b565b6000546001600160a01b03163314610f915760405162461bcd60e51b81526004016104a4906119e0565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890600090a250565b6000326001600160a01b0386161480610ffa5750610ffa6003326114e1565b6110505760405162461bcd60e51b815260206004820152602160248201527f42616c616e63653a2063616c6c6572206973206e6f74206120636f6e73756d656044820152603960f91b60648201526084016104a4565b600061105c8486611ae5565b9050600081116110bd5760405162461bcd60e51b815260206004820152602660248201527f42616c616e63653a3a636c61696d3a206e65676174697665206f72207a65726f60448201526520636c61696d60d01b60648201526084016104a4565b6110c686610446565b81111561112e5760405162461bcd60e51b815260206004820152603060248201527f42616c616e63653a3a636c61696d3a20636c61696d20616d6f756e742065786360448201526f65656473206e65742062616c616e636560801b60648201526084016104a4565b6001600160a01b03861660009081526006602052604081208054839290611156908490611ae5565b90915550506008805490600061116b83611b14565b91905055506040518060c00160405280600854815260200161118a3390565b6001600160a01b039081168252881660208201526040810187905260608101869052608001600090526008546000908152600760209081526040918290208351815590830151600180830180546001600160a01b039384166001600160a01b0319918216179091559385015160028085018054929094169190951617909155606084015160038301556080840151600483015560a084015160058301805493949193909260ff1990911691849081111561124657611246611b45565b0217905550905050600854866001600160a01b03167f58fb02bcfedd338314c70bcf748b4f71a01259cf8956f31b34cb09acf29809cb8560405161128a919061198b565b60405180910390a35050600854949350505050565b6000546001600160a01b031633146112c95760405162461bcd60e51b81526004016104a4906119e0565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e226ef369891596b0fa96f74a9b8851142c6bdddb90ea625901b0d37a9af5f690600090a250565b6000546001600160a01b0316331461133d5760405162461bcd60e51b81526004016104a4906119e0565b6001600160a01b0381166113a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a4565b6113ab81611546565b50565b6001600160a01b0381166114105760405162461bcd60e51b815260206004820152602360248201527f42616c616e63653a3a6465706f7369743a20696e76616c696420726563697069604482015262195b9d60ea1b60648201526084016104a4565b600034116114735760405162461bcd60e51b815260206004820152602a60248201527f42616c616e63653a3a6465706f7369743a206e65676174697665206f72207a656044820152691c9bc819195c1bdcda5d60b21b60648201526084016104a4565b6001600160a01b0381166000908152600560205260408120805434929061149b908490611ae5565b90915550506040513481526001600160a01b038216907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a250565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006114ff836001600160a01b038416611596565b6000610474825490565b60006114ff836001600160a01b038416611689565b60006114ff83836116d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600183016020526040812054801561167f5760006115ba600183611afd565b85549091506000906115ce90600190611afd565b90508181146116335760008660000182815481106115ee576115ee611b71565b906000526020600020015490508087600001848154811061161157611611611b71565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061164457611644611b5b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610474565b6000915050610474565b60008181526001830160205260408120546116d057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610474565b506000610474565b60008260000182815481106116ef576116ef611b71565b9060005260206000200154905092915050565b600082601f83011261171357600080fd5b8135602067ffffffffffffffff82111561172f5761172f611b87565b8160051b61173e828201611ab4565b83815282810190868401838801850189101561175957600080fd5b600093505b8584101561177c57803583526001939093019291840191840161175e565b50979650505050505050565b60006020828403121561179a57600080fd5b81356114ff81611b9d565b600080600080608085870312156117bb57600080fd5b84356117c681611b9d565b9350602085810135935060408601359250606086013567ffffffffffffffff808211156117f257600080fd5b818801915088601f83011261180657600080fd5b81358181111561181857611818611b87565b61182a601f8201601f19168501611ab4565b9150808252898482850101111561184057600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121561187257600080fd5b813567ffffffffffffffff81111561188957600080fd5b61189584828501611702565b949350505050565b6000806000606084860312156118b257600080fd5b833567ffffffffffffffff808211156118ca57600080fd5b6118d687838801611702565b945060208601359150808211156118ec57600080fd5b6118f887838801611702565b9350604086013591508082111561190e57600080fd5b5061191b86828701611702565b9150509250925092565b60006020828403121561193757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561197f5783516001600160a01b03168352928401929184019160010161195a565b50909695505050505050565b600060208083528351808285015260005b818110156119b85785810183015185820160400152820161199c565b818111156119ca576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f42616c616e63653a2063616c6c6572206973206e6f742074686520696e73706560408201526331ba37b960e11b606082015260800190565b8681526001600160a01b03868116602083015285166040820152606081018490526080810183905260c0810160038310611aa357634e487b7160e01b600052602160045260246000fd5b8260a0830152979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611add57611add611b87565b604052919050565b60008219821115611af857611af8611b2f565b500190565b600082821015611b0f57611b0f611b2f565b500390565b6000600019821415611b2857611b28611b2f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146113ab57600080fdfea26469706673582212209d42cf9ea894827057e2ee7fa9838bdcf42e1d12517814341a5ac300ef4dcb2964736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c806365e3527d116100ab578063e578a2251161006f578063e578a22514610386578063ed2cee9e146103a6578063eed7c45e146103c6578063f2fde38b146103e6578063f340fa0114610406578063fccd7f721461041957600080fd5b806365e3527d146102e657806370a0823114610306578063715018a6146103335780638da5cb5b14610348578063b14f2a391461036657600080fd5b8063328199b7116100fd578063328199b714610241578063332d950f1461024157806341dc341214610256578063435e29801461026c578063473f01751461028e57806361d027b3146102ae57600080fd5b80630b986a501461013a5780630e27e3df1461016d578063112940f91461018f578063278ecde1146101af57806328bdcde8146101cf575b600080fd5b34801561014657600080fd5b5061015a610155366004611788565b610446565b6040519081526020015b60405180910390f35b34801561017957600080fd5b5061018d610188366004611788565b61047a565b005b34801561019b57600080fd5b5061018d6101aa366004611788565b61055e565b3480156101bb57600080fd5b5061018d6101ca366004611925565b6106b7565b3480156101db57600080fd5b5061022f6101ea366004611925565b60076020526000908152604090208054600182015460028301546003840154600485015460059095015493946001600160a01b03938416949290931692909160ff1686565b60405161016496959493929190611a59565b34801561024d57600080fd5b5061015a600a81565b34801561026257600080fd5b5061015a60085481565b34801561027857600080fd5b50610281610834565b604051610164919061193e565b34801561029a57600080fd5b5061018d6102a936600461189d565b6108e7565b3480156102ba57600080fd5b506001546102ce906001600160a01b031681565b6040516001600160a01b039091168152602001610164565b3480156102f257600080fd5b5061018d610301366004611860565b610ce5565b34801561031257600080fd5b5061015a610321366004611788565b60056020526000908152604090205481565b34801561033f57600080fd5b5061018d610f31565b34801561035457600080fd5b506000546001600160a01b03166102ce565b34801561037257600080fd5b5061018d610381366004611788565b610f67565b34801561039257600080fd5b5061015a6103a13660046117a5565b610fdb565b3480156103b257600080fd5b506002546102ce906001600160a01b031681565b3480156103d257600080fd5b5061018d6103e1366004611788565b61129f565b3480156103f257600080fd5b5061018d610401366004611788565b611313565b61018d610414366004611788565b6113ae565b34801561042557600080fd5b5061015a610434366004611788565b60066020526000908152604090205481565b6001600160a01b03811660009081526006602090815260408083205460059092528220546104749190611afd565b92915050565b6000546001600160a01b031633146104ad5760405162461bcd60e51b81526004016104a4906119e0565b60405180910390fd5b6104b86003826114e1565b61051b5760405162461bcd60e51b815260206004820152602e60248201527f42616c616e63653a3a616464436f6e73756d65723a20636f6e73756d6572206160448201526d1b1c9958591e481c995b5bdd995960921b60648201526084016104a4565b610526600382611506565b506040516001600160a01b038216907fe3f5ed5f263f1f01764a96edfc7d025f511ec5f7d180e8816908b78bcf74f09890600090a250565b6000546001600160a01b031633146105885760405162461bcd60e51b81526004016104a4906119e0565b6105936003826114e1565b156105f55760405162461bcd60e51b815260206004820152602c60248201527f42616c616e63653a3a616464436f6e73756d65723a20636f6e73756d6572206160448201526b1b1c9958591e48185919195960a21b60648201526084016104a4565b600a610601600361151b565b106106745760405162461bcd60e51b815260206004820152603c60248201527f42616c616e63653a3a616464436f6e73756d65723a20636f6e73756d6572206d60448201527f757374206e6f7420657863656564206d6178696d756d20636f756e740000000060648201526084016104a4565b61067f600382611525565b506040516001600160a01b038216907f28b26e7a3d20aedbc5f8f2ebf7da671c0491723a2b78f47a097b0e46dee0714290600090a250565b33816107165760405162461bcd60e51b815260206004820152602860248201527f42616c616e63653a3a726566756e643a206e65676174697665206f72207a65726044820152671bc81c99599d5b9960c21b60648201526084016104a4565b61071f81610446565b8211156107895760405162461bcd60e51b815260206004820152603260248201527f42616c616e63653a3a726566756e643a20726566756e6420616d6f756e742065604482015271786365656473206e65742062616c616e636560701b60648201526084016104a4565b6001600160a01b038116600090815260056020526040812080548492906107b1908490611afd565b90915550506040516001600160a01b0382169083156108fc029084906000818181858888f193505050501580156107ec573d6000803e3d6000fd5b50806001600160a01b03167fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8360405161082891815260200190565b60405180910390a25050565b60606000610842600361151b565b67ffffffffffffffff81111561085a5761085a611b87565b604051908082528060200260200182016040528015610883578160200160208202803683370190505b50905060005b610893600361151b565b8110156108e1576108a560038261153a565b8282815181106108b7576108b7611b71565b6001600160a01b0390921660209283029190910190910152806108d981611b14565b915050610889565b50919050565b6002546001600160a01b031633146109115760405162461bcd60e51b81526004016104a490611a15565b81518351148015610923575080518351145b61097d5760405162461bcd60e51b815260206004820152602560248201527f42616c616e63653a3a616363657074436c61696d733a206172697479206d69736044820152640dac2e8c6d60db1b60648201526084016104a4565b600a8351106109dd5760405162461bcd60e51b815260206004820152602660248201527f42616c616e63653a3a616363657074436c61696d733a20746f6f206d616e7920604482015265636c61696d7360d01b60648201526084016104a4565b6000805b8451811015610ca35760008582815181106109fe576109fe611b71565b60200260200101519050600081118015610a1a57506008548111155b610a745760405162461bcd60e51b815260206004820152602560248201527f42616c616e63653a3a616363657074436c61696d733a2062696c6c206e6f7420604482015264199bdd5b9960da1b60648201526084016104a4565b6000858381518110610a8857610a88611b71565b602002602001015190506000858481518110610aa657610aa6611b71565b6020026020010151905060008183610abe9190611ae5565b6000858152600760205260408120600481015460038201549394509092610ae59190611ae5565b90506000600583015460ff166002811115610b0257610b02611b45565b14610b655760405162461bcd60e51b815260206004820152602d60248201527f42616c616e63653a3a616363657074436c61696d733a2062696c6c20616c726560448201526c18591e481c1c9bd8d95cdcd959609a1b60648201526084016104a4565b80831115610bd15760405162461bcd60e51b815260206004820152603360248201527f42616c616e63653a3a616363657074436c61696d733a20636c61696d20616d6f604482015272756e742065786365656473206d61782066656560681b60648201526084016104a4565b60058201805460ff19166001179055600382018590556004820184905560028201546001600160a01b031660009081526006602052604081208054839290610c1a908490611afd565b909155505060028201546001600160a01b031660009081526005602052604081208054859290610c4b908490611afd565b90915550610c5b90508389611ae5565b8254604051919950907f799d0ccabf9cc5c53a2860d6b8133855f77618de4233ce9bb031395090d1c08090600090a25050505050508080610c9b90611b14565b9150506109e1565b506001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610cde573d6000803e3d6000fd5b5050505050565b6002546001600160a01b03163314610d0f5760405162461bcd60e51b81526004016104a490611a15565b600a815110610d6f5760405162461bcd60e51b815260206004820152602660248201527f42616c616e63653a3a72656a656374436c61696d733a20746f6f206d616e7920604482015265636c61696d7360d01b60648201526084016104a4565b60005b8151811015610f2d576000828281518110610d8f57610d8f611b71565b60200260200101519050600081118015610dab57506008548111155b610e055760405162461bcd60e51b815260206004820152602560248201527f42616c616e63653a3a72656a656374436c61696d733a2062696c6c206e6f7420604482015264199bdd5b9960da1b60648201526084016104a4565b600081815260076020526040812090600582015460ff166002811115610e2d57610e2d611b45565b14610e905760405162461bcd60e51b815260206004820152602d60248201527f42616c616e63653a3a72656a656374436c61696d733a2062696c6c20616c726560448201526c18591e481c1c9bd8d95cdcd959609a1b60648201526084016104a4565b600081600401548260030154610ea69190611ae5565b60058301805460ff191660029081179091558301546001600160a01b0316600090815260066020526040812080549293508392909190610ee7908490611afd565b909155505081546040517f64133ae74e171ef7ce5b71e32115aba7117a4f1bd6ef67b768668f5af1af97ad90600090a25050508080610f2590611b14565b915050610d72565b5050565b6000546001600160a01b03163314610f5b5760405162461bcd60e51b81526004016104a4906119e0565b610f656000611546565b565b6000546001600160a01b03163314610f915760405162461bcd60e51b81526004016104a4906119e0565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890600090a250565b6000326001600160a01b0386161480610ffa5750610ffa6003326114e1565b6110505760405162461bcd60e51b815260206004820152602160248201527f42616c616e63653a2063616c6c6572206973206e6f74206120636f6e73756d656044820152603960f91b60648201526084016104a4565b600061105c8486611ae5565b9050600081116110bd5760405162461bcd60e51b815260206004820152602660248201527f42616c616e63653a3a636c61696d3a206e65676174697665206f72207a65726f60448201526520636c61696d60d01b60648201526084016104a4565b6110c686610446565b81111561112e5760405162461bcd60e51b815260206004820152603060248201527f42616c616e63653a3a636c61696d3a20636c61696d20616d6f756e742065786360448201526f65656473206e65742062616c616e636560801b60648201526084016104a4565b6001600160a01b03861660009081526006602052604081208054839290611156908490611ae5565b90915550506008805490600061116b83611b14565b91905055506040518060c00160405280600854815260200161118a3390565b6001600160a01b039081168252881660208201526040810187905260608101869052608001600090526008546000908152600760209081526040918290208351815590830151600180830180546001600160a01b039384166001600160a01b0319918216179091559385015160028085018054929094169190951617909155606084015160038301556080840151600483015560a084015160058301805493949193909260ff1990911691849081111561124657611246611b45565b0217905550905050600854866001600160a01b03167f58fb02bcfedd338314c70bcf748b4f71a01259cf8956f31b34cb09acf29809cb8560405161128a919061198b565b60405180910390a35050600854949350505050565b6000546001600160a01b031633146112c95760405162461bcd60e51b81526004016104a4906119e0565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e226ef369891596b0fa96f74a9b8851142c6bdddb90ea625901b0d37a9af5f690600090a250565b6000546001600160a01b0316331461133d5760405162461bcd60e51b81526004016104a4906119e0565b6001600160a01b0381166113a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a4565b6113ab81611546565b50565b6001600160a01b0381166114105760405162461bcd60e51b815260206004820152602360248201527f42616c616e63653a3a6465706f7369743a20696e76616c696420726563697069604482015262195b9d60ea1b60648201526084016104a4565b600034116114735760405162461bcd60e51b815260206004820152602a60248201527f42616c616e63653a3a6465706f7369743a206e65676174697665206f72207a656044820152691c9bc819195c1bdcda5d60b21b60648201526084016104a4565b6001600160a01b0381166000908152600560205260408120805434929061149b908490611ae5565b90915550506040513481526001600160a01b038216907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a250565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006114ff836001600160a01b038416611596565b6000610474825490565b60006114ff836001600160a01b038416611689565b60006114ff83836116d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818152600183016020526040812054801561167f5760006115ba600183611afd565b85549091506000906115ce90600190611afd565b90508181146116335760008660000182815481106115ee576115ee611b71565b906000526020600020015490508087600001848154811061161157611611611b71565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061164457611644611b5b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610474565b6000915050610474565b60008181526001830160205260408120546116d057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610474565b506000610474565b60008260000182815481106116ef576116ef611b71565b9060005260206000200154905092915050565b600082601f83011261171357600080fd5b8135602067ffffffffffffffff82111561172f5761172f611b87565b8160051b61173e828201611ab4565b83815282810190868401838801850189101561175957600080fd5b600093505b8584101561177c57803583526001939093019291840191840161175e565b50979650505050505050565b60006020828403121561179a57600080fd5b81356114ff81611b9d565b600080600080608085870312156117bb57600080fd5b84356117c681611b9d565b9350602085810135935060408601359250606086013567ffffffffffffffff808211156117f257600080fd5b818801915088601f83011261180657600080fd5b81358181111561181857611818611b87565b61182a601f8201601f19168501611ab4565b9150808252898482850101111561184057600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121561187257600080fd5b813567ffffffffffffffff81111561188957600080fd5b61189584828501611702565b949350505050565b6000806000606084860312156118b257600080fd5b833567ffffffffffffffff808211156118ca57600080fd5b6118d687838801611702565b945060208601359150808211156118ec57600080fd5b6118f887838801611702565b9350604086013591508082111561190e57600080fd5b5061191b86828701611702565b9150509250925092565b60006020828403121561193757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561197f5783516001600160a01b03168352928401929184019160010161195a565b50909695505050505050565b600060208083528351808285015260005b818110156119b85785810183015185820160400152820161199c565b818111156119ca576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f42616c616e63653a2063616c6c6572206973206e6f742074686520696e73706560408201526331ba37b960e11b606082015260800190565b8681526001600160a01b03868116602083015285166040820152606081018490526080810183905260c0810160038310611aa357634e487b7160e01b600052602160045260246000fd5b8260a0830152979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611add57611add611b87565b604052919050565b60008219821115611af857611af8611b2f565b500190565b600082821015611b0f57611b0f611b2f565b500390565b6000600019821415611b2857611b28611b2f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146113ab57600080fdfea26469706673582212209d42cf9ea894827057e2ee7fa9838bdcf42e1d12517814341a5ac300ef4dcb2964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptClaims(uint256[],uint256[],uint256[])": {
        "params": {
          "_bills": "Target bills.",
          "gasFees": "Confirmed claims gas fees by bills.",
          "protocolFees": "Confirmed claims protocol fees by bills."
        }
      },
      "addConsumer(address)": {
        "params": {
          "consumer": "Added consumer."
        }
      },
      "changeInspector(address)": {
        "params": {
          "_inspector": "New inspector oracle address."
        }
      },
      "changeTreasury(address)": {
        "params": {
          "_treasury": "New treasury contract address."
        }
      },
      "claim(address,uint256,uint256,string)": {
        "params": {
          "account": "Target account.",
          "description": "Claim description.",
          "gasFee": "Claim gas fee.",
          "protocolFee": "Claim protocol fee."
        }
      },
      "consumers()": {
        "returns": {
          "_0": "All consumers addresses."
        }
      },
      "deposit(address)": {
        "params": {
          "recipient": "Target recipient."
        }
      },
      "netBalanceOf(address)": {
        "params": {
          "account": "Target account."
        },
        "returns": {
          "_0": "Net balance (balance minus claim)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "refund(uint256)": {
        "params": {
          "amount": "Refunded amount."
        }
      },
      "rejectClaims(uint256[])": {
        "params": {
          "_bills": "Target bills."
        }
      },
      "removeConsumer(address)": {
        "params": {
          "consumer": "Removed consumer."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_consumers": {
        "details": "Consumers list."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAXIMUM_CLAIM_PACKAGE()": {
        "notice": "Maximum accept or reject claims by one call."
      },
      "MAXIMUM_CONSUMER_COUNT()": {
        "notice": "Maximum consumer count."
      },
      "acceptClaims(uint256[],uint256[],uint256[])": {
        "notice": "Accept bills package."
      },
      "addConsumer(address)": {
        "notice": "Add consumer."
      },
      "balanceOf(address)": {
        "notice": "Account balance."
      },
      "billCount()": {
        "notice": "Bill count."
      },
      "bills(uint256)": {
        "notice": "Bills."
      },
      "changeInspector(address)": {
        "notice": "Change inspector oracle address."
      },
      "changeTreasury(address)": {
        "notice": "Change treasury contract address."
      },
      "claim(address,uint256,uint256,string)": {
        "notice": "Send claim."
      },
      "claimOf(address)": {
        "notice": "Account claim."
      },
      "consumers()": {
        "notice": "Get all consumers."
      },
      "deposit(address)": {
        "notice": "Deposit ETH to balance."
      },
      "inspector()": {
        "notice": "Oracle accepting and rejecting claims"
      },
      "netBalanceOf(address)": {
        "notice": "Get net balance of account."
      },
      "refund(uint256)": {
        "notice": "Refund ETH from balance."
      },
      "rejectClaims(uint256[])": {
        "notice": "Reject bills package."
      },
      "removeConsumer(address)": {
        "notice": "Remove consumer."
      },
      "treasury()": {
        "notice": "Treasury contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Balance.sol:Balance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1465,
        "contract": "contracts/Balance.sol:Balance",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1468,
        "contract": "contracts/Balance.sol:Balance",
        "label": "inspector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1472,
        "contract": "contracts/Balance.sol:Balance",
        "label": "_consumers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)1147_storage"
      },
      {
        "astId": 1477,
        "contract": "contracts/Balance.sol:Balance",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1482,
        "contract": "contracts/Balance.sol:Balance",
        "label": "claimOf",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1506,
        "contract": "contracts/Balance.sol:Balance",
        "label": "bills",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Bill)1500_storage)"
      },
      {
        "astId": 1509,
        "contract": "contracts/Balance.sol:Balance",
        "label": "billCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(BillStatus)1486": {
        "encoding": "inplace",
        "label": "enum Balance.BillStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bill)1500_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Balance.Bill)",
        "numberOfBytes": "32",
        "value": "t_struct(Bill)1500_storage"
      },
      "t_struct(AddressSet)1147_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1146,
            "contract": "contracts/Balance.sol:Balance",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)876_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bill)1500_storage": {
        "encoding": "inplace",
        "label": "struct Balance.Bill",
        "members": [
          {
            "astId": 1488,
            "contract": "contracts/Balance.sol:Balance",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1490,
            "contract": "contracts/Balance.sol:Balance",
            "label": "claimant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1492,
            "contract": "contracts/Balance.sol:Balance",
            "label": "account",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1494,
            "contract": "contracts/Balance.sol:Balance",
            "label": "gasFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1496,
            "contract": "contracts/Balance.sol:Balance",
            "label": "protocolFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1499,
            "contract": "contracts/Balance.sol:Balance",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(BillStatus)1486"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)876_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 871,
            "contract": "contracts/Balance.sol:Balance",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 875,
            "contract": "contracts/Balance.sol:Balance",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}