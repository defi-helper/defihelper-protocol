{
  "address": "0x6FB410042a0d486103ce089cA72c53D0EF5a46D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_terasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "info",
          "type": "address"
        }
      ],
      "name": "StorageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct BuyLiquidity.Swap",
          "name": "swap0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct BuyLiquidity.Swap",
          "name": "swap1",
          "type": "tuple"
        },
        {
          "internalType": "contract IPair",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "buyLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "changePrireFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "name": "changeStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "contract Storage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct BuyLiquidity.Swap",
          "name": "swap0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct BuyLiquidity.Swap",
          "name": "swap1",
          "type": "tuple"
        },
        {
          "internalType": "contract IPair",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "sellLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc71b62d3ac5249a6b9548b06c0eee8e6c2e62fbcdb04e2b80afa7da3612183c1",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0x6FB410042a0d486103ce089cA72c53D0EF5a46D8",
    "transactionIndex": 0,
    "gasUsed": "1873176",
    "logsBloom": "0x
    "blockHash": "0x4484198d50d1c9a14ba97b23f4463be0a18ccd6ffe5e5595c44c6d9177d0d598",
    "transactionHash": "0xc71b62d3ac5249a6b9548b06c0eee8e6c2e62fbcdb04e2b80afa7da3612183c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12538163,
        "transactionHash": "0xc71b62d3ac5249a6b9548b06c0eee8e6c2e62fbcdb04e2b80afa7da3612183c1",
        "address": "0x6FB410042a0d486103ce089cA72c53D0EF5a46D8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4484198d50d1c9a14ba97b23f4463be0a18ccd6ffe5e5595c44c6d9177d0d598"
      }
    ],
    "blockNumber": 12538163,
    "cumulativeGasUsed": "1873176",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xacc779aCdb52ac22071311097Af1249Fa8397125",
    "0x22D846Ff8CA3bF8f3155F9E93252351Ebbe84865",
    "0x64125B3eDF8C778c0814A6cd368a133764B1e156"
  ],
  "numDeployments": 1,
  "solcInputHash": "0a93f0d3e4f1f4e203a83d526654e6ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_terasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"info\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyLiquidity.Swap\",\"name\":\"swap0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyLiquidity.Swap\",\"name\":\"swap1\",\"type\":\"tuple\"},{\"internalType\":\"contract IPair\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"changePrireFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"name\":\"changeStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyLiquidity.Swap\",\"name\":\"swap0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyLiquidity.Swap\",\"name\":\"swap1\",\"type\":\"tuple\"},{\"internalType\":\"contract IPair\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changePrireFeed(address)\":{\"params\":{\"_priceFeed\":\"New price feed contract address.\"}},\"changeStorage(address)\":{\"params\":{\"_info\":\"New storage contract address.\"}},\"changeTreasury(address)\":{\"params\":{\"_treasury\":\"New treasury contract address.\"}},\"fee()\":{\"returns\":{\"_0\":\"Current call commission.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changePrireFeed(address)\":{\"notice\":\"Change price feed contract address.\"},\"changeStorage(address)\":{\"notice\":\"Change storage contract address.\"},\"changeTreasury(address)\":{\"notice\":\"Change treasury contract address.\"},\"info()\":{\"notice\":\"Storage contract\"},\"priceFeed()\":{\"notice\":\"Fee token to USD price feed contract\"},\"treasury()\":{\"notice\":\"Treasury contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automate/BuyLiquidity.sol\":\"BuyLiquidity\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Storage is Ownable {\\n  /// @dev Bytes storage.\\n  mapping(bytes32 => bytes) private _bytes;\\n\\n  /// @dev Bool storage.\\n  mapping(bytes32 => bool) private _bool;\\n\\n  /// @dev Uint storage.\\n  mapping(bytes32 => uint256) private _uint;\\n\\n  /// @dev Int storage.\\n  mapping(bytes32 => int256) private _int;\\n\\n  /// @dev Address storage.\\n  mapping(bytes32 => address) private _address;\\n\\n  /// @dev String storage.\\n  mapping(bytes32 => string) private _string;\\n\\n  event Updated(bytes32 indexed key);\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getBytes(bytes32 key) external view returns (bytes memory) {\\n    return _bytes[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getBool(bytes32 key) external view returns (bool) {\\n    return _bool[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getUint(bytes32 key) external view returns (uint256) {\\n    return _uint[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getInt(bytes32 key) external view returns (int256) {\\n    return _int[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getAddress(bytes32 key) external view returns (address) {\\n    return _address[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getString(bytes32 key) external view returns (string memory) {\\n    return _string[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setBytes(bytes32 key, bytes calldata value) external onlyOwner {\\n    _bytes[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setBool(bytes32 key, bool value) external onlyOwner {\\n    _bool[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setUint(bytes32 key, uint256 value) external onlyOwner {\\n    _uint[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setInt(bytes32 key, int256 value) external onlyOwner {\\n    _int[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setAddress(bytes32 key, address value) external onlyOwner {\\n    _address[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setString(bytes32 key, string calldata value) external onlyOwner {\\n    _string[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteBytes(bytes32 key) external onlyOwner {\\n    delete _bytes[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteBool(bytes32 key) external onlyOwner {\\n    delete _bool[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteUint(bytes32 key) external onlyOwner {\\n    delete _uint[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteInt(bytes32 key) external onlyOwner {\\n    delete _int[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteAddress(bytes32 key) external onlyOwner {\\n    delete _address[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteString(bytes32 key) external onlyOwner {\\n    delete _string[key];\\n    emit Updated(key);\\n  }\\n}\\n\",\"keccak256\":\"0xeec1b882d840aaf23bbcb6f67f4b1e265675dad434ec0c4ac09a1a4d2bf677f5\",\"license\":\"BSD-3-Clause\"},\"contracts/automate/BuyLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Storage.sol\\\";\\nimport \\\"./dex/IPair.sol\\\";\\nimport \\\"./dex/IRouter.sol\\\";\\n\\ninterface IPriceFeed {\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\\ncontract BuyLiquidity is Ownable {\\n  /// @notice Storage contract\\n  Storage public info;\\n\\n  /// @notice Treasury contract\\n  address payable public treasury;\\n\\n  /// @notice Fee token to USD price feed contract\\n  IPriceFeed public priceFeed;\\n\\n  struct Swap {\\n    address[] path;\\n    uint256 outMin;\\n  }\\n\\n  event StorageChanged(address indexed info);\\n\\n  event TreasuryChanged(address indexed treasury);\\n\\n  event PriceFeedChanged(address indexed priceFeed);\\n\\n  constructor(\\n    address _info,\\n    address payable _terasury,\\n    address _priceFeed\\n  ) {\\n    info = Storage(_info);\\n    treasury = _terasury;\\n    priceFeed = IPriceFeed(_priceFeed);\\n  }\\n\\n  /**\\n   * @notice Change storage contract address.\\n   * @param _info New storage contract address.\\n   */\\n  function changeStorage(address _info) external onlyOwner {\\n    info = Storage(_info);\\n    emit StorageChanged(_info);\\n  }\\n\\n  /**\\n   * @notice Change treasury contract address.\\n   * @param _treasury New treasury contract address.\\n   */\\n  function changeTreasury(address payable _treasury) external onlyOwner {\\n    treasury = _treasury;\\n    emit TreasuryChanged(treasury);\\n  }\\n\\n  /**\\n   * @notice Change price feed contract address.\\n   * @param _priceFeed New price feed contract address.\\n   */\\n  function changePrireFeed(address _priceFeed) external onlyOwner {\\n    priceFeed = IPriceFeed(_priceFeed);\\n    emit PriceFeedChanged(_priceFeed);\\n  }\\n\\n  function _swap(\\n    address router,\\n    uint256 amount,\\n    uint256 outMin,\\n    address[] memory path,\\n    uint256 deadline\\n  ) internal {\\n    if (path[0] == path[path.length - 1]) return;\\n\\n    IRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n      amount,\\n      outMin,\\n      path,\\n      address(this),\\n      deadline\\n    );\\n  }\\n\\n  /**\\n   * @return Current call commission.\\n   */\\n  function fee() public view returns (uint256) {\\n    uint256 feeUSD = info.getUint(keccak256(\\\"DFH:Fee:Automate:BuyLiquidity\\\"));\\n    if (feeUSD == 0) return 0;\\n\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    require(answer > 0, \\\"BuyLiquidity::fee: invalid fee token price\\\");\\n\\n    return (feeUSD * (10**18)) / uint256(answer);\\n  }\\n\\n  function _payCommission() internal {\\n    uint256 payFee = fee();\\n    require(msg.value >= payFee, \\\"BuyLiquidity::_payCommission: insufficient funds to pay commission\\\");\\n    treasury.transfer(payFee);\\n    if (msg.value > payFee) {\\n      payable(msg.sender).transfer(msg.value - payFee);\\n    }\\n  }\\n\\n  function _returnRemainder(address[3] memory tokens) internal {\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      uint256 tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n      if (tokenBalance > 0) {\\n        IERC20(tokens[i]).transfer(msg.sender, tokenBalance);\\n      }\\n    }\\n  }\\n\\n  function buyLiquidity(\\n    uint256 amount,\\n    address router,\\n    Swap memory swap0,\\n    Swap memory swap1,\\n    IPair to,\\n    uint256 deadline\\n  ) external payable {\\n    require(\\n      info.getBool(keccak256(abi.encodePacked(\\\"DFH:Contract:BuyLiquidity:allowedRouter:\\\", router))),\\n      \\\"BuyLiquidity::buyLiquidity: invalid router address\\\"\\n    );\\n    require(swap0.path[0] == swap1.path[0], \\\"BuyLiquidity::buyLiqudity: start token not equals\\\");\\n\\n    _payCommission();\\n\\n    // Get tokens in\\n    address token0 = to.token0();\\n    require(swap0.path[swap0.path.length - 1] == token0, \\\"BuyLiquidity::buyLiqudity: invalid token0\\\");\\n    address token1 = to.token1();\\n    require(swap1.path[swap1.path.length - 1] == token1, \\\"BuyLiquidity::buyLiqudity: invalid token1\\\");\\n\\n    // Swap tokens\\n    IERC20(swap0.path[0]).transferFrom(msg.sender, address(this), amount);\\n    IERC20(swap0.path[0]).approve(router, amount);\\n    uint256 amount0In = amount / 2;\\n    _swap(router, amount0In, swap0.outMin, swap0.path, deadline);\\n    uint256 amount1In = amount - amount0In;\\n    _swap(router, amount1In, swap1.outMin, swap1.path, deadline);\\n\\n    // Add liquidity\\n    amount0In = IERC20(token0).balanceOf(address(this));\\n    amount1In = IERC20(token1).balanceOf(address(this));\\n    IERC20(token0).approve(router, amount0In);\\n    IERC20(token1).approve(router, amount1In);\\n    IRouter(router).addLiquidity(token0, token1, amount0In, amount1In, 0, 0, msg.sender, deadline);\\n\\n    // Return remainder\\n    _returnRemainder([token0, token1, swap0.path[0]]);\\n  }\\n\\n  function sellLiquidity(\\n    uint256 amount,\\n    address router,\\n    Swap memory swap0,\\n    Swap memory swap1,\\n    IPair from,\\n    uint256 deadline\\n  ) external payable {\\n    require(\\n      info.getBool(keccak256(abi.encodePacked(\\\"DFH:Contract:BuyLiquidity:allowedRouter:\\\", router))),\\n      \\\"BuyLiquidity::sellLiquidity: invalid router address\\\"\\n    );\\n    require(\\n      swap0.path[swap0.path.length - 1] == swap1.path[swap1.path.length - 1],\\n      \\\"BuyLiquidity::sellLiqudity: end token not equals\\\"\\n    );\\n\\n    _payCommission();\\n\\n    // Get tokens in\\n    address token0 = from.token0();\\n    require(swap0.path[0] == token0, \\\"BuyLiquidity::sellLiqudity: invalid token0\\\");\\n    address token1 = from.token1();\\n    require(swap1.path[0] == token1, \\\"BuyLiquidity::sellLiqudity: invalid token1\\\");\\n\\n    // Remove liquidity\\n    from.transferFrom(msg.sender, address(this), amount);\\n    from.approve(router, amount);\\n    IRouter(router).removeLiquidity(token0, token1, amount, 0, 0, address(this), deadline);\\n\\n    // Swap tokens\\n    uint256 amount0In = IERC20(token0).balanceOf(address(this));\\n    IERC20(token0).approve(router, amount0In);\\n    _swap(router, amount0In, swap0.outMin, swap0.path, deadline);\\n    uint256 amount1In = IERC20(token1).balanceOf(address(this));\\n    IERC20(token1).approve(router, amount1In);\\n    _swap(router, amount1In, swap1.outMin, swap1.path, deadline);\\n\\n    _returnRemainder([token0, token1, swap0.path[swap0.path.length - 1]]);\\n  }\\n}\\n\",\"keccak256\":\"0xf048bde3f130c0a55bc97dd6c54403a1022f24c235fd896541366c283ef9b48e\",\"license\":\"BSD-3-Clause\"},\"contracts/automate/dex/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x406c40f23bdba65871297c67385d2d54e004b362495adc74d0ea528377758ab5\",\"license\":\"BSD-3-Clause\"},\"contracts/automate/dex/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IRouter {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa36c07040a1da6080e4fa5b641c1219bbdd24c79f0701412aaa375aaa18a325e\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063741bef1a11610064578063741bef1a146101665780638da5cb5b14610186578063b14f2a39146101a4578063c50c97d0146101c4578063ddca3f43146101e4578063f2fde38b1461020757600080fd5b806301b886a2146100ac578063370158ea146100c15780633c65f2d1146100fe57806361d027b31461011e5780636a103af71461013e578063715018a614610151575b600080fd5b6100bf6100ba366004611b9d565b610227565b005b3480156100cd57600080fd5b506001546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100bf610119366004611b21565b610a73565b34801561012a57600080fd5b506002546100e1906001600160a01b031681565b6100bf61014c366004611b9d565b610ae7565b34801561015d57600080fd5b506100bf611348565b34801561017257600080fd5b506003546100e1906001600160a01b031681565b34801561019257600080fd5b506000546001600160a01b03166100e1565b3480156101b057600080fd5b506100bf6101bf366004611b21565b61137e565b3480156101d057600080fd5b506100bf6101df366004611b21565b6113f2565b3480156101f057600080fd5b506101f9611466565b6040519081526020016100f5565b34801561021357600080fd5b506100bf610222366004611b21565b61161f565b6001546040516001600160a01b0390911690637ae1cfca9061024d908890602001611cdc565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161028191815260200190565b60206040518083038186803b15801561029957600080fd5b505afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190611b62565b61033e5760405162461bcd60e51b815260206004820152603360248201527f4275794c69717569646974793a3a73656c6c4c69717569646974793a20696e76604482015272616c696420726f75746572206164647265737360681b60648201526084015b60405180910390fd5b8251805161034e90600190611e71565b8151811061035e5761035e611eb9565b60200260200101516001600160a01b0316846000015160018660000151516103869190611e71565b8151811061039657610396611eb9565b60200260200101516001600160a01b03161461040d5760405162461bcd60e51b815260206004820152603060248201527f4275794c69717569646974793a3a73656c6c4c697175646974793a20656e642060448201526f746f6b656e206e6f7420657175616c7360801b6064820152608401610335565b6104156116ba565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561045057600080fd5b505afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190611b45565b9050806001600160a01b031685600001516000815181106104ab576104ab611eb9565b60200260200101516001600160a01b03161461051c5760405162461bcd60e51b815260206004820152602a60248201527f4275794c69717569646974793a3a73656c6c4c697175646974793a20696e766160448201526906c696420746f6b656e360b41b6064820152608401610335565b6000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561055757600080fd5b505afa15801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f9190611b45565b9050806001600160a01b031685600001516000815181106105b2576105b2611eb9565b60200260200101516001600160a01b0316146106235760405162461bcd60e51b815260206004820152602a60248201527f4275794c69717569646974793a3a73656c6c4c697175646974793a20696e76616044820152696c696420746f6b656e3160b01b6064820152608401610335565b6040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b038516906323b872dd90606401602060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190611b62565b5060405163095ea7b360e01b81526001600160a01b038881166004830152602482018a905285169063095ea7b390604401602060405180830381600087803b1580156106f457600080fd5b505af1158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190611b62565b50604051635d5155ef60e11b81526001600160a01b0383811660048301528281166024830152604482018a905260006064830181905260848301523060a483015260c4820185905288169063baa2abde9060e4016040805180830381600087803b15801561079957600080fd5b505af11580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190611c3a565b50506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561081557600080fd5b505afa158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190611b84565b60405163095ea7b360e01b81526001600160a01b038a81166004830152602482018390529192509084169063095ea7b390604401602060405180830381600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190611b62565b506108e9888289602001518a60000151886117c4565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190611b84565b60405163095ea7b360e01b81526001600160a01b038b81166004830152602482018390529192509084169063095ea7b390604401602060405180830381600087803b1580156109b157600080fd5b505af11580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190611b62565b506109ff898289602001518a60000151896117c4565b604080516060810182526001600160a01b0380871682528516602082015289518051610a679383019190610a3590600190611e71565b81518110610a4557610a45611eb9565b60200260200101516001600160a01b03166001600160a01b0316815250611891565b50505050505050505050565b6000546001600160a01b03163314610a9d5760405162461bcd60e51b815260040161033590611d30565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f70880247142cf113e15f57599afcb48f4cdd196159d882cda54475da68ea996190600090a250565b6001546040516001600160a01b0390911690637ae1cfca90610b0d908890602001611cdc565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610b4191815260200190565b60206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190611b62565b610bf85760405162461bcd60e51b815260206004820152603260248201527f4275794c69717569646974793a3a6275794c69717569646974793a20696e76616044820152716c696420726f75746572206164647265737360701b6064820152608401610335565b82518051600090610c0b57610c0b611eb9565b60200260200101516001600160a01b03168460000151600081518110610c3357610c33611eb9565b60200260200101516001600160a01b031614610cab5760405162461bcd60e51b815260206004820152603160248201527f4275794c69717569646974793a3a6275794c697175646974793a20737461727460448201527020746f6b656e206e6f7420657175616c7360781b6064820152608401610335565b610cb36116ba565b6000826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610cee57600080fd5b505afa158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190611b45565b855180519192506001600160a01b03831691610d4490600190611e71565b81518110610d5457610d54611eb9565b60200260200101516001600160a01b031614610dc45760405162461bcd60e51b815260206004820152602960248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e76616c6044820152680696420746f6b656e360bc1b6064820152608401610335565b6000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611b45565b855180519192506001600160a01b03831691610e5590600190611e71565b81518110610e6557610e65611eb9565b60200260200101516001600160a01b031614610ed55760405162461bcd60e51b815260206004820152602960248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e76616c604482015268696420746f6b656e3160b81b6064820152608401610335565b85518051600090610ee857610ee8611eb9565b60209081029190910101516040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190611b62565b5085518051600090610f8e57610f8e611eb9565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038981166004830152602482018b90529091169063095ea7b390604401602060405180830381600087803b158015610fe457600080fd5b505af1158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c9190611b62565b50600061102a60028a611e30565b9050611041888289602001518a60000151886117c4565b600061104d828b611e71565b9050611064898289602001518a60000151896117c4565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db9190611b84565b6040516370a0823160e01b81523060048201529092506001600160a01b038416906370a082319060240160206040518083038186803b15801561111d57600080fd5b505afa158015611131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111559190611b84565b60405163095ea7b360e01b81526001600160a01b038b81166004830152602482018590529192509085169063095ea7b390604401602060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db9190611b62565b5060405163095ea7b360e01b81526001600160a01b038a811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b15801561122657600080fd5b505af115801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190611b62565b5060405162e8e33760e81b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260006084830181905260a48301523360c483015260e482018790528a169063e8e337009061010401606060405180830381600087803b1580156112d357600080fd5b505af11580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b9190611c5e565b5050604080516060810182526001600160a01b038088168252861660208201528a518051610a6794509192830191600090610a4557610a45611eb9565b6000546001600160a01b031633146113725760405162461bcd60e51b815260040161033590611d30565b61137c60006119e3565b565b6000546001600160a01b031633146113a85760405162461bcd60e51b815260040161033590611d30565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890600090a250565b6000546001600160a01b0316331461141c5760405162461bcd60e51b815260040161033590611d30565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cbb7a6ee88dbf214a9b660a9f1af063e42a24cbfe26a046a718b3f621baa53990600090a250565b60015460405163bd02d0f560e01b81527fed3a30f9a1639759f8c23859293de095ace4c3da0699fccc56863cec92430bf1600482015260009182916001600160a01b039091169063bd02d0f59060240160206040518083038186803b1580156114ce57600080fd5b505afa1580156114e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115069190611b84565b90508061151557600091505090565b60035460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190611c8c565b505050915050600081136115fb5760405162461bcd60e51b815260206004820152602a60248201527f4275794c69717569646974793a3a6665653a20696e76616c69642066656520746044820152696f6b656e20707269636560b01b6064820152608401610335565b8061160e83670de0b6b3a7640000611e52565b6116189190611e30565b9250505090565b6000546001600160a01b031633146116495760405162461bcd60e51b815260040161033590611d30565b6001600160a01b0381166116ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610335565b6116b7816119e3565b50565b60006116c4611466565b9050803410156117475760405162461bcd60e51b815260206004820152604260248201527f4275794c69717569646974793a3a5f706179436f6d6d697373696f6e3a20696e60448201527f73756666696369656e742066756e647320746f2070617920636f6d6d6973736960648201526137b760f11b608482015260a401610335565b6002546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611781573d6000803e3d6000fd5b50803411156116b757336108fc6117988334611e71565b6040518115909202916000818181858888f193505050501580156117c0573d6000803e3d6000fd5b5050565b81600183516117d39190611e71565b815181106117e3576117e3611eb9565b60200260200101516001600160a01b03168260008151811061180757611807611eb9565b60200260200101516001600160a01b031614156118235761188a565b604051635c11d79560e01b81526001600160a01b03861690635c11d795906118579087908790879030908890600401611d65565b600060405180830381600087803b15801561187157600080fd5b505af1158015611885573d6000803e3d6000fd5b505050505b5050505050565b60005b60038110156117c05760008282600381106118b1576118b1611eb9565b60200201516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192e9190611b84565b905080156119d05782826003811061194857611948611eb9565b602002015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561199657600080fd5b505af11580156119aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ce9190611b62565b505b50806119db81611e88565b915050611894565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060408284031215611a4557600080fd5b611a4d611dd6565b9050813567ffffffffffffffff80821115611a6757600080fd5b818401915084601f830112611a7b57600080fd5b8135602082821115611a8f57611a8f611ecf565b8160051b9250611aa0818401611dff565b8281528181019085830185870184018a1015611abb57600080fd5b600096505b84871015611aea5780359550611ad586611ee5565b85835260019690960195918301918301611ac0565b50808752505080860135818601525050505092915050565b805169ffffffffffffffffffff81168114611b1c57600080fd5b919050565b600060208284031215611b3357600080fd5b8135611b3e81611ee5565b9392505050565b600060208284031215611b5757600080fd5b8151611b3e81611ee5565b600060208284031215611b7457600080fd5b81518015158114611b3e57600080fd5b600060208284031215611b9657600080fd5b5051919050565b60008060008060008060c08789031215611bb657600080fd5b863595506020870135611bc881611ee5565b9450604087013567ffffffffffffffff80821115611be557600080fd5b611bf18a838b01611a33565b95506060890135915080821115611c0757600080fd5b50611c1489828a01611a33565b9350506080870135611c2581611ee5565b8092505060a087013590509295509295509295565b60008060408385031215611c4d57600080fd5b505080516020909101519092909150565b600080600060608486031215611c7357600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215611ca457600080fd5b611cad86611b02565b9450602086015193506040860151925060608601519150611cd060808701611b02565b90509295509295909350565b7f4446483a436f6e74726163743a4275794c69717569646974793a616c6c6f7765815267322937baba32b91d60c11b602082015260609190911b6bffffffffffffffffffffffff19166028820152603c0190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611db55784516001600160a01b031683529383019391830191600101611d90565b50506001600160a01b03969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715611df957611df9611ecf565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e2857611e28611ecf565b604052919050565b600082611e4d57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e6c57611e6c611ea3565b500290565b600082821015611e8357611e83611ea3565b500390565b6000600019821415611e9c57611e9c611ea3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146116b757600080fdfea264697066735822122042d14e1fdce24f0418f8b06011dec16e1bf6cb7813ab33de7f2eaad0acc2b29864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changePrireFeed(address)": {
        "params": {
          "_priceFeed": "New price feed contract address."
        }
      },
      "changeStorage(address)": {
        "params": {
          "_info": "New storage contract address."
        }
      },
      "changeTreasury(address)": {
        "params": {
          "_treasury": "New treasury contract address."
        }
      },
      "fee()": {
        "returns": {
          "_0": "Current call commission."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changePrireFeed(address)": {
        "notice": "Change price feed contract address."
      },
      "changeStorage(address)": {
        "notice": "Change storage contract address."
      },
      "changeTreasury(address)": {
        "notice": "Change treasury contract address."
      },
      "info()": {
        "notice": "Storage contract"
      },
      "priceFeed()": {
        "notice": "Fee token to USD price feed contract"
      },
      "treasury()": {
        "notice": "Treasury contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3691,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "info",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Storage)3326"
      },
      {
        "astId": 3694,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 3698,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPriceFeed)3685"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)3685": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(Storage)3326": {
        "encoding": "inplace",
        "label": "contract Storage",
        "numberOfBytes": "20"
      }
    }
  }
}